import "@fluencelabs/aqua-lib/builtin.aqua"
import Peer from "@fluencelabs/aqua-lib/builtin.aqua"

const PRIVATE_KEY_NODE_PEER_ID ?= "12D3KooWSD5PToNiLQwKDXsu8JSysCwUt8BVUJEqCHcDe7P5h45e"
const PRIVATE_KEY_SERVICE_ID ?= "22a7aa17-40f1-4d3c-9dd0-b0c878d941bb"

service PrivateKey("private_key_store_service"):
    store_private_key(db_name: string, public_key:string, private_key: string, password: string) -> bool 
    get_private_key(db_name: string,private_key: string, password: string) -> string
    testing_key(db_name: string) -> bool

func store_private_key_data(db_name:string,public_key:string,private_key:string,password:string) -> bool:
    on PRIVATE_KEY_NODE_PEER_ID:
        PrivateKey PRIVATE_KEY_SERVICE_ID
        res <- PrivateKey.store_private_key(db_name, public_key, private_key, password)
    <- res

func get_private_key_data(db_name: string,public_key:string,password :string) -> string:
    on PRIVATE_KEY_NODE_PEER_ID:
        PrivateKey PRIVATE_KEY_SERVICE_ID
        res <- PrivateKey.get_private_key(db_name,public_key,password)
    <- res

func getRelayTime() -> u64:
    on HOST_PEER_ID:
        ts <- Peer.timestamp_ms()
    <- ts

func test_connection(db_name:string) -> bool:
    on PRIVATE_KEY_NODE_PEER_ID:
        PrivateKey PRIVATE_KEY_SERVICE_ID
        res <- PrivateKey.testing_key(db_name)
    <- res

service HelloWorld("hello-world"):
    hello(str: string)
    getFortune() -> string

func sayHello():
    HelloWorld.hello("Hello, world!")

func tellFortune() -> string:
    res <- HelloWorld.getFortune()
    <- res

